resource "google_iam_deny_policy" "deny_serviceAccountImpersonation" {
  provider     = google-beta
  for_each     = var.project_details 
  parent       = urlencode("cloudresourcemanager.googleapis.com/projects/${each.value.project_id}")
  name         = "deny-serviceAccountImpersonation-policy"
  display_name = "deny any service Account Impersonation at project level policy"
  rules {
    deny_rule {
      denied_principals  = ["principalSet://goog/public:all"]
      denied_permissions = [
			"iam.googleapis.com/serviceAccounts.implicitDelegation",
			"iam.googleapis.com/serviceAccountKeys.create",
			"iam.googleapis.com/serviceAccountKeys.delete",
			"iam.googleapis.com/serviceAccounts.implicitDelegation",
			"iam.googleapis.com/serviceAccounts.getOpenIdToken",
			"iam.googleapis.com/serviceAccounts.getAccessToken",
			"iam.googleapis.com/serviceAccounts.signBlob",
			"iam.googleapis.com/serviceAccounts.signJwt"
		]
    }
  }
}

module "org-policy" {
  source            = "terraform-google-modules/org-policy/google"
  version           = "~> 3.0.2"

  constraint        = "constraints/serviceuser.services"
  policy_type       = "list"
  policy_for	    = "organization"
  organization_id   = "YOUR_ORG"
  enforce           = true
  deny              = ["deploymentmanager.googleapis.com"]
  #exclude_folders  = ["folders/folder-1-id", "folders/folder-2-id"]
  exclude_projects  = ["project3", "project4"]
}
